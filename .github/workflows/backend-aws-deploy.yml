name: TOONPICK Backend AWS Deploy Pipeline

on:
  workflow_dispatch:
    inputs:
      version:
        description: '배포 버전'
        required: true
        default: 'latest'

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: 저장소 체크아웃
        uses: actions/checkout@v3

      - name: AWS 자격증명 설정
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-northeast-2

      - name: EC2 인스턴스 생성
        run: |
          echo "[INFO] EC2 생성 시작"
          INSTANCE_ID=$(aws ec2 run-instances \
            --region ap-northeast-2 \
            --image-id ${{ secrets.BASE_AMI_ID }} \
            --instance-type t2.micro \
            --key-name ${{ secrets.EC2_KEY }} \
            --security-group-ids ${{ secrets.SECURITY_GROUP_ID }} \
            --subnet-id ${{ secrets.SUBNET_ID }} \
            --iam-instance-profile Arn=${{ secrets.EC2_INSTANCE_PROFILE_ARN }} \
            --query 'Instances[?State.Name==`pending`].InstanceId' \
            --output text)

          echo "INSTANCE_ID=${INSTANCE_ID}" >> $GITHUB_ENV
          echo "[INFO] EC2 생성 완료: ${INSTANCE_ID}"

      - name: EC2 Public IP 획득
        run: |
          echo "[INFO] Public IP 획득 중..."
          sleep 20
          NEW_INSTANCE_IP=$(aws ec2 describe-instances \
            --instance-ids $INSTANCE_ID \
            --query 'Reservations[0].Instances[0].PublicIpAddress' \
            --output text)

          echo "NEW_INSTANCE_IP=${NEW_INSTANCE_IP}" >> $GITHUB_ENV
          echo "[INFO] Public IP: ${NEW_INSTANCE_IP}"

      - name: docker-compose.yaml EC2로 이동
        uses: appleboy/scp-action@v0.1.4
        with:
          host: ${{ env.NEW_INSTANCE_IP }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          source: ./backend/docker-compose.yaml
          target: /home/${{ secrets.SSH_USER }}/TOONPICK/
          strip_components: 2
          overwrite: true

      - name: EC2에 환경변수 세팅
        uses: appleboy/ssh-action@v0.1.10
        with:
          host: ${{ env.NEW_INSTANCE_IP }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            echo "[INFO] SSM Parameter Store에서 환경변수 가져오기"
        
            cd ~/TOONPICK
            
            SERVICE_NAME="TOONPICK"
            ENVIRONMENT="prod"

            aws ssm get-parameters-by-path \
              --path "/${SERVICE_NAME}/${ENVIRONMENT}/" \
              --with-decryption \
              --recursive \
              --output text \
              --query "Parameters[*].[Name,Value]" | \
              sed -E "s|/${SERVICE_NAME}/${ENVIRONMENT}/[^/]+/||g" | \
              awk '{print $1"="$2}' > .env

            if [ -f .env ]; then
              echo "[INFO] .env 파일이 성공적으로 생성되었습니다."
            else
              echo "[ERROR] .env 파일 생성에 실패했습니다."
            fi

            echo "[INFO] 환경변수 env 생성 완료"

      - name: 새로운 EC2에 SSH 접속하여 배포 실행
        uses: appleboy/ssh-action@v0.1.10
        with:
          host: ${{ env.NEW_INSTANCE_IP }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            export DOCKER_HUB_USERNAME="${{ secrets.DOCKER_HUB_USERNAME }}"
            export DOCKER_HUB_PASSWORD="${{ secrets.DOCKER_HUB_PASSWORD }}"

            echo "[INFO] Docker Hub 로그인..."
            echo "$DOCKER_HUB_PASSWORD" | docker login -u "$DOCKER_HUB_USERNAME" --password-stdin

            cd ~/TOONPICK
            echo "[INFO] 기존 서비스 정지..."
            docker-compose -f docker-compose.yaml down || true

            echo "[INFO] Docker 컨테이너 실행..."
            docker-compose -f docker-compose.yaml up -d --force-recreate

      - name: 새 AMI 생성
        run: |
          NEW_AMI_ID=$(aws ec2 create-image \
            --instance-id $INSTANCE_ID \
            --name "ToonPick-AMI-${{ github.run_id }}" \
            --no-reboot \
            --query 'ImageId' \
            --output text)

          echo "NEW_AMI_ID=${NEW_AMI_ID}" >> $GITHUB_ENV
          echo "[INFO] AMI 생성 완료: ${NEW_AMI_ID}"

      - name: Launch Template 바로가기 업데이트
        run: |
          NEW_VERSION=$(aws ec2 create-launch-template-version \
            --launch-template-id ${{ secrets.LAUNCH_TEMPLATE_ID }} \
            --version-description "Updated AMI from run ${{ github.run_id }}" \
            --source-version 1 \
            --launch-template-data "{\"ImageId\":\"${{ env.NEW_AMI_ID }}\"}" \
            --query 'LaunchTemplateVersion.VersionNumber' \
            --output text)

          echo "NEW_VERSION=${NEW_VERSION}" >> $GITHUB_ENV
          echo "[INFO] Launch Template 새로운 버전 생성: ${NEW_VERSION}"

      - name: Auto Scaling Group 업데이트
        run: |
          echo "[INFO] Auto Scaling Group 업데이트 시작"
          aws autoscaling update-auto-scaling-group \
            --auto-scaling-group-name ${{ secrets.AUTO_SCALING_GROUP_NAME }} \
            --launch-template LaunchTemplateId=${{ secrets.LAUNCH_TEMPLATE_ID }},Version='$Latest'
          echo "[INFO] Auto Scaling Group 업데이트 완료"

      - name: 인스턴스 리프레시 시작
        run: |
          echo "[INFO] 인스턴스 리프레시 시작"
          aws autoscaling start-instance-refresh \
            --auto-scaling-group-name ${{ secrets.AUTO_SCALING_GROUP_NAME }} \
            --strategy Rolling \
            --preferences '{"MinHealthyPercentage":100,"InstanceWarmup":300}'
          echo "[INFO] 인스턴스 리프레시 요청 완료"

      - name: 임시 EC2 인스턴스 중지 및 종료
        if: always()
        run: |
          echo "AMI 생성이 완료되었으므로 임시 인스턴스를 종료합니다."
          
          aws ec2 terminate-instances --instance-ids $INSTANCE_ID
          
          echo "임시 인스턴스 종료 요청 완료: ${INSTANCE_ID}"

  slack-notification:
    needs: deploy
    if: always()
    runs-on: ubuntu-latest
    
    steps:
      - name: Slack Webhook 알림 전송
        run: |
          if [ "${{ needs.deploy.result }}" == "success" ]; then
            STATUS=":white_check_mark: *AWS 배포 성공*"
            COLOR="#2EB67D"
            MESSAGE="TOONPICK AWS 배포가 성공적으로 완료되었습니다. :rocket:"
          else
            STATUS=":x: *AWS 배포 실패*"
            COLOR="#D00000"
            MESSAGE="TOONPICK AWS 배포 실패 :warning:\n실패 Job: \`${{ needs.deploy.result }}\`"
          fi

          curl -X POST -H 'Content-type: application/json' --data "{
            \"attachments\": [
              {
                \"color\": \"${COLOR}\",
                \"title\": \"${STATUS}\",
                \"text\": \"${MESSAGE}\",
                \"fields\": [
                  {
                    \"title\": \"GitHub Workflow\",
                    \"value\": \"${{ github.workflow }}\",
                    \"short\": true
                  },
                  {
                    \"title\": \"브랜치\",
                    \"value\": \"${{ github.ref_name }}\",
                    \"short\": true
                  },
                  {
                    \"title\": \"커밋자\",
                    \"value\": \"${{ github.actor }}\",
                    \"short\": true
                  },
                  {
                    \"title\": \"배포 버전\",
                    \"value\": \"${{ github.event.inputs.version }}\",
                    \"short\": true
                  },
                  {
                    \"title\": \"Run URL\",
                    \"value\": \"https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}\"
                  }
                ]
              }
            ]
          }" ${{ secrets.SLACK_WEBHOOK_URL }} 