name: TOONPICK Backend CD Pipeline

on:
  workflow_dispatch:
    inputs:
      version:
        description: '배포 버전'
        required: true
        default: 'latest'

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: 저장소 체크아웃
        uses: actions/checkout@v3
        with:
          token: ${{ secrets.PAT_TOKEN }} 

      - name: JDK 17 설정
        uses: actions/setup-java@v3
        with:
          distribution: 'corretto'
          java-version: '17'

      - name: Gradle 캐시 설정 / 빌드 최적화
        uses: actions/cache@v3
        with:
          path: ~/.gradle/caches
          key: gradle-${{ runner.os }}-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            gradle-${{ runner.os }}-

      - name: Gradle 실행 권한 추가
        run: chmod +x backend/gradlew

      - name: Gradle 빌드 및 테스트
        working-directory: backend
        run: |
          ./gradlew :module-application:toonpick-app-api:clean :module-application:toonpick-app-api:build \
                     :module-application:toonpick-app-worker:clean :module-application:toonpick-app-worker:build \
                     :module-application:toonpick-app-admin:clean :module-application:toonpick-app-admin:build \
                     -x test --no-daemon --parallel --configure-on-demand

      - name: 빌드 결과 확인
        run: |
          echo "=== toonpick-app-api JAR ==="
          ls -al backend/module-application/toonpick-app-api/build/libs
          echo "=== toonpick-app-worker JAR ==="
          ls -al backend/module-application/toonpick-app-worker/build/libs
          echo "=== toonpick-app-admin JAR ==="
          ls -al backend/module-application/toonpick-app-admin/build/libs

      - name: 빌드된 JAR 파일 업로드
        uses: actions/upload-artifact@v4
        with:
          name: backend-jar-files
          path: |
            backend/module-application/toonpick-app-api/build/libs/toonpick-api-0.0.1-SNAPSHOT.jar
            backend/module-application/toonpick-app-worker/build/libs/toonpick-worker-0.0.1-SNAPSHOT.jar
            backend/module-application/toonpick-app-admin/build/libs/toonpick-admin-0.0.1-SNAPSHOT.jar
          retention-days: 1


  docker-build-and-push:
    needs: build
    runs-on: ubuntu-latest
    strategy:
      matrix:
        module:
          - name: api
            dir: toonpick-app-api
            jar: toonpick-api-0.0.1-SNAPSHOT.jar
            repo: toonpick-service-api
          - name: worker
            dir: toonpick-app-worker
            jar: toonpick-worker-0.0.1-SNAPSHOT.jar
            repo: toonpick-service-worker
          - name: admin
            dir: toonpick-app-admin
            jar: toonpick-admin-0.0.1-SNAPSHOT.jar
            repo: toonpick-service-admin

    steps:
      - name: 저장소 체크아웃
        uses: actions/checkout@v3
        with:
          token: ${{ secrets.PAT_TOKEN }}

      - name: 모듈별 JAR 다운로드
        uses: actions/download-artifact@v4
        with:
          name: backend-jar-files
          path: backend/module-application/${{ matrix.module.dir }}/build/libs

      - name: Docker Login
        env:
          DOCKER_HUB_USERNAME: ${{ secrets.DOCKER_HUB_USERNAME }}
          DOCKER_HUB_PASSWORD: ${{ secrets.DOCKER_HUB_PASSWORD }}
        run: echo "$DOCKER_HUB_PASSWORD" | docker login -u "$DOCKER_HUB_USERNAME" --password-stdin

      - name: Docker Build & Push - ${{ matrix.module.name }}
        env:
          DOCKER_HUB_USERNAME: ${{ secrets.DOCKER_HUB_USERNAME }}
          IMAGE_TAG: "${{ github.event.inputs.version }}"
        run: |
          echo "=== Docker Build 시작: ${{ matrix.module.name }} ==="
          docker build \
            -t $DOCKER_HUB_USERNAME/${{ matrix.module.repo }}:$IMAGE_TAG \
            -t $DOCKER_HUB_USERNAME/${{ matrix.module.repo }}:latest \
            -f backend/module-application/${{ matrix.module.dir }}/Dockerfile \
            backend/module-application/${{ matrix.module.dir }}

          docker push $DOCKER_HUB_USERNAME/${{ matrix.module.repo }}:$IMAGE_TAG
          docker push $DOCKER_HUB_USERNAME/${{ matrix.module.repo }}:latest



  deploy:
    needs: docker-build-and-push
    runs-on: ubuntu-latest

    steps:
      - name: AWS 자격증명 설정
        run: |
          mkdir -p ~/.aws
          echo "[default]" > ~/.aws/credentials
          echo "aws_access_key_id=${{ secrets.AWS_ACCESS_KEY_ID }}" >> ~/.aws/credentials
          echo "aws_secret_access_key=${{ secrets.AWS_SECRET_ACCESS_KEY }}" >> ~/.aws/credentials

          echo "[default]" > ~/.aws/config
          echo "region = ap-northeast-2" >> ~/.aws/config

      - name: 새로운 EC2 인스턴스 생성
        run: |
          INSTANCE_ID=$(aws ec2 run-instances \
            --region ap-northeast-2 \
            --image-id ${{ secrets.BASE_AMI_ID }} \
            --instance-type t2.micro \
            --key-name ${{ secrets.EC2_KEY }} \
            --security-group-ids ${{ secrets.SECURITY_GROUP_ID }} \
            --subnet-id ${{ secrets.SUBNET_ID }} \
            --query 'Instances[?State.Name==`pending`].InstanceId' \
            --output text)

          echo "INSTANCE_ID=${INSTANCE_ID}" >> $GITHUB_ENV
          echo "새로운 EC2 인스턴스 생성 완료: ${INSTANCE_ID}"

      - name: 새로운 EC2 인스턴스 public IP 획득
        run: |
          sleep 30  # 인스턴스 생성 대기
          
          NEW_INSTANCE_IP=$(aws ec2 describe-instances \
            --instance-ids $INSTANCE_ID \
            --query 'Reservations[0].Instances[0].PublicIpAddress' \
            --output text)

          echo "NEW_INSTANCE_IP=${NEW_INSTANCE_IP}" >> $GITHUB_ENV
          echo "새로운 인스턴스 IP: ${NEW_INSTANCE_IP}"

      - name: 새로운 EC2에 SSH 접속하여 배포 실행
        uses: appleboy/ssh-action@v0.1.10
        with:
          host: ${{ env.NEW_INSTANCE_IP }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            export DOCKER_HUB_USERNAME="${{ secrets.DOCKER_HUB_USERNAME }}"
            export DOCKER_HUB_PASSWORD="${{ secrets.DOCKER_HUB_PASSWORD }}"

            cd ~/TOONPICK

            echo "최신 Docker Image Pull..."
            docker pull $DOCKER_HUB_USERNAME/toonpick-service-app:latest

            echo "Docker 컨테이너 실행..."
            docker-compose up -d --force-recreate

      - name: 새로운 AMI 생성
        run: |
          NEW_AMI_ID=$(aws ec2 create-image \
            --instance-id $INSTANCE_ID \
            --name "ToonPick-AMI-${{ github.run_id }}" \
            --no-reboot \
            --query 'ImageId' \
            --output text)

          echo "NEW_AMI_ID=${NEW_AMI_ID}" >> $GITHUB_ENV
          echo "새로운 AMI 생성 완료: ${NEW_AMI_ID}"

      - name: 임시 EC2 인스턴스 중지 및 종료
        run: |
          echo "AMI 생성이 완료되었으므로 임시 인스턴스를 종료합니다."
          
          aws ec2 terminate-instances --instance-ids $INSTANCE_ID
          
          echo "임시 인스턴스 종료 요청 완료: ${INSTANCE_ID}"

      - name: 시작 템플릿(Launch Template) 업데이트
        run: |
          NEW_VERSION=$(aws ec2 create-launch-template-version \
            --launch-template-id ${{ secrets.LAUNCH_TEMPLATE_ID }} \
            --version-description "Updated AMI" \
            --source-version 1 \
            --launch-template-data "{\"ImageId\":\"${{ env.NEW_AMI_ID }}\"}" \
            --query 'LaunchTemplateVersion.VersionNumber' \
            --output text)

          echo "NEW_VERSION=${NEW_VERSION}" >> $GITHUB_ENV
          echo "새로운 Launch Template 버전 생성 완료: ${NEW_VERSION}"

      - name: Auto Scaling 그룹 업데이트
        run: |
          aws autoscaling update-auto-scaling-group \
            --auto-scaling-group-name ${{ secrets.AUTO_SCALING_GROUP_NAME }} \
            --launch-template LaunchTemplateId=${{ secrets.LAUNCH_TEMPLATE_ID }},Version=$NEW_VERSION
  