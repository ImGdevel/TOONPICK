name: TOONPICK Backend CD Pipeline

on:
  workflow_dispatch:
    inputs:
      version:
        description: '배포 버전'
        required: true
        default: 'latest'

jobs:
  trigger-ci:
    runs-on: ubuntu-latest
    steps:
      - name: CI 파이프라인 트리거
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const response = await github.actions.createWorkflowDispatch({
              owner: context.repo.owner,
              repo: context.repo.repo,
              workflow_id: 'CI.yaml',
              ref: 'main'
            });
            console.log('CI 파이프라인 트리거 완료:', response.status);

  wait-for-ci:
    runs-on: ubuntu-latest
    needs: trigger-ci
    steps:
      - name: CI 완료 대기
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const run = await github.actions.listWorkflowRuns({
              owner: context.repo.owner,
              repo: context.repo.repo,
              workflow_id: 'CI.yaml',
              branch: 'main',
              status: 'in_progress'
            });
            while (run.data.workflow_runs.length > 0) {
              console.log('CI 파이프라인 실행 중... 대기 중');
              await new Promise(r => setTimeout(r, 10000));  # 10초 대기
            }
            console.log('CI 파이프라인 완료!');

  docker-build-and-push:
    needs: wait-for-ci
    runs-on: ubuntu-latest

    steps:
      - name: 저장소 체크아웃
        uses: actions/checkout@v3
        with:
          token: ${{ secrets.PAT_TOKEN }}

      - name: 빌드된 JAR 파일 다운로드 (아티팩트 복원)
        uses: actions/download-artifact@v4
        with:
          name: backend-jar
          path: backend/module-application/toonpick-app-api/build/libs

      - name: Docker Build & Push
        env:
          DOCKER_HUB_USERNAME: ${{ secrets.DOCKER_HUB_USERNAME }}
          DOCKER_HUB_PASSWORD: ${{ secrets.DOCKER_HUB_PASSWORD }}
          REPOSITORY: "toonpick-service-app"
          IMAGE_TAG: "${{ github.event.inputs.version }}"
        run: |
          echo "$DOCKER_HUB_PASSWORD" | docker login -u "$DOCKER_HUB_USERNAME" --password-stdin

          echo "=== Docker Build 시작 ==="
          docker build \
            --cache-from $DOCKER_HUB_USERNAME/$REPOSITORY:latest \
            -t $DOCKER_HUB_USERNAME/$REPOSITORY:$IMAGE_TAG \
            -t $DOCKER_HUB_USERNAME/$REPOSITORY:latest \
            -f backend/Dockerfile .

          docker push $DOCKER_HUB_USERNAME/$REPOSITORY:$IMAGE_TAG
          docker push $DOCKER_HUB_USERNAME/$REPOSITORY:latest

  deploy:
    needs: docker-build-and-push
    runs-on: ubuntu-latest

    steps:
      - name: EC2에 SSH 접속하여 배포 실행
        uses: appleboy/ssh-action@v0.1.10
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            export DOCKER_HUB_USERNAME="${{ secrets.DOCKER_HUB_USERNAME }}"
            export DOCKER_HUB_PASSWORD="${{ secrets.DOCKER_HUB_PASSWORD }}"

            cd ~/TOONPICK

            echo "최신 Docker Image Pull & 배포 시작..."
            docker-compose down

            docker pull $DOCKER_HUB_USERNAME/toonpick-service-app:latest
            docker pull $DOCKER_HUB_USERNAME/toonpick-service-app:${{ github.event.inputs.version }}

            docker-compose up -d --force-recreate
