name: TOONPICK Backend Build & Docker Pipeline

on:
  workflow_dispatch:
    inputs:
      version:
        description: '배포 버전'
        required: true
        default: 'latest'
      deploy_to_aws:
        description: 'AWS 배포까지 진행할지 여부'
        required: true
        default: false
        type: boolean

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: 저장소 체크아웃
        uses: actions/checkout@v3
        with:
          token: ${{ secrets.PAT_TOKEN }} 

      - name: JDK 17 설정
        uses: actions/setup-java@v3
        with:
          distribution: 'corretto'
          java-version: '17'

      - name: Gradle 캐시 설정 / 빌드 최적화
        uses: actions/cache@v3
        with:
          path: ~/.gradle/caches
          key: gradle-${{ runner.os }}-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            gradle-${{ runner.os }}-

      - name: Gradle 실행 권한 추가
        run: chmod +x backend/gradlew

      - name: Gradle 빌드 & 테스트 실행
        working-directory: backend
        run: |
          echo "[INFO] toonpick-app 메시지 빌드 시작"
          ./gradlew :module-application:toonpick-app-api:clean :module-application:toonpick-app-api:bootjar \
                     :module-application:toonpick-app-worker:clean :module-application:toonpick-app-worker:bootjar \
                     :module-application:toonpick-app-admin:clean :module-application:toonpick-app-admin:bootjar \
                     -x test --no-daemon --parallel --configure-on-demand

      - name: 빌드 결과 확인
        run: |
          echo "=== toonpick-app-api JAR ==="
          ls -al backend/module-application/toonpick-app-api/build/libs
          echo "=== toonpick-app-worker JAR ==="
          ls -al backend/module-application/toonpick-app-worker/build/libs
          echo "=== toonpick-app-admin JAR ==="
          ls -al backend/module-application/toonpick-app-admin/build/libs

      - name: toonpick-api JAR 업로드
        uses: actions/upload-artifact@v4
        with:
          name: toonpick-api
          path: backend/module-application/toonpick-app-api/build/libs/*.jar
          retention-days: 1

      - name: toonpick-worker JAR 업로드
        uses: actions/upload-artifact@v4
        with:
          name: toonpick-worker
          path: backend/module-application/toonpick-app-worker/build/libs/*.jar
          retention-days: 1

      - name: toonpick-admin JAR 업로드
        uses: actions/upload-artifact@v4
        with:
          name: toonpick-admin
          path: backend/module-application/toonpick-app-admin/build/libs/*.jar
          retention-days: 1

  docker-build-and-push:
    needs: build
    runs-on: ubuntu-latest
    strategy:
      matrix:
        module:
          - name: api
            dir: toonpick-app-api
            jar: toonpick-api-0.0.1-SNAPSHOT.jar
            repo: toonpick-service-api
          - name: worker
            dir: toonpick-app-worker
            jar: toonpick-worker-0.0.1-SNAPSHOT.jar
            repo: toonpick-service-worker
          - name: admin
            dir: toonpick-app-admin
            jar: toonpick-admin-0.0.1-SNAPSHOT.jar
            repo: toonpick-service-admin

    steps:
      - name: 저장소 체크아웃
        uses: actions/checkout@v3
        with:
          token: ${{ secrets.PAT_TOKEN }}

      - name: 모듈별 아티팩트 다운로드
        uses: actions/download-artifact@v4
        with:
          name: toonpick-${{ matrix.module.name }}
          path: backend/module-application/${{ matrix.module.dir }}/build/libs

      - name: JAR 파일 목록 출력
        run: |
          echo "=== 다운로드된 JAR 목록 ==="
          ls -al backend/module-application/${{ matrix.module.dir }}/build/libs

      - name: JAR 파일을 app.jar로 이름 변경
        run: |
          mv backend/module-application/${{ matrix.module.dir }}/build/libs/${{ matrix.module.jar }} \
            backend/module-application/${{ matrix.module.dir }}/build/libs/app.jar

      - name: Docker Login
        env:
          DOCKER_HUB_USERNAME: ${{ secrets.DOCKER_HUB_USERNAME }}
          DOCKER_HUB_PASSWORD: ${{ secrets.DOCKER_HUB_PASSWORD }}
        run: echo "$DOCKER_HUB_PASSWORD" | docker login -u "$DOCKER_HUB_USERNAME" --password-stdin

      - name: Docker Build & Push - ${{ matrix.module.name }}
        env:
          DOCKER_HUB_USERNAME: ${{ secrets.DOCKER_HUB_USERNAME }}
          IMAGE_TAG: "${{ github.event.inputs.version }}"
        run: |
          echo "=== Docker Build 시작: ${{ matrix.module.name }} ==="
          docker build \
            -t $DOCKER_HUB_USERNAME/${{ matrix.module.repo }}:$IMAGE_TAG \
            -t $DOCKER_HUB_USERNAME/${{ matrix.module.repo }}:latest \
            -f backend/module-application/${{ matrix.module.dir }}/Dockerfile \
            backend/module-application/${{ matrix.module.dir }}

          docker push $DOCKER_HUB_USERNAME/${{ matrix.module.repo }}:$IMAGE_TAG
          docker push $DOCKER_HUB_USERNAME/${{ matrix.module.repo }}:latest

  trigger-aws-deploy:
    needs: docker-build-and-push
    if: ${{ github.event.inputs.deploy_to_aws == 'true' }}
    runs-on: ubuntu-latest
    
    steps:
      - name: AWS 배포 워크플로우 트리거
        uses: actions/github-script@v6
        with:
          script: |
            await github.rest.actions.createWorkflowDispatch({
              owner: context.repo.owner,
              repo: context.repo.repo,
              workflow_id: 'backend-aws-deploy.yml',
              ref: context.ref,
              inputs: {
                version: '${{ github.event.inputs.version }}'
              }
            });
            console.log('AWS 배포 워크플로우가 트리거되었습니다.');

  slack-notification:
    needs: [docker-build-and-push, trigger-aws-deploy]
    if: always()
    runs-on: ubuntu-latest
    
    steps:
      - name: Slack Webhook 알림 전송
        run: |
          if [ "${{ needs.docker-build-and-push.result }}" == "success" ]; then
            if [ "${{ github.event.inputs.deploy_to_aws }}" == "true" ]; then
              STATUS=":white_check_mark: *Build & Docker 성공*"
              COLOR="#2EB67D"
              MESSAGE="TOONPICK Build & Docker 파이프라인이 성공적으로 완료되었습니다. AWS 배포가 트리거되었습니다. :rocket:"
            else
              STATUS=":white_check_mark: *Build & Docker 성공*"
              COLOR="#2EB67D"
              MESSAGE="TOONPICK Build & Docker 파이프라인이 성공적으로 완료되었습니다. AWS 배포는 건너뛰었습니다. :package:"
            fi
          else
            STATUS=":x: *Build & Docker 실패*"
            COLOR="#D00000"
            MESSAGE="TOONPICK Build & Docker 파이프라인 실패 :warning:\n실패 Job: \`${{ needs.docker-build-and-push.result }}\`"
          fi

          curl -X POST -H 'Content-type: application/json' --data "{
            \"attachments\": [
              {
                \"color\": \"${COLOR}\",
                \"title\": \"${STATUS}\",
                \"text\": \"${MESSAGE}\",
                \"fields\": [
                  {
                    \"title\": \"GitHub Workflow\",
                    \"value\": \"${{ github.workflow }}\",
                    \"short\": true
                  },
                  {
                    \"title\": \"브랜치\",
                    \"value\": \"${{ github.ref_name }}\",
                    \"short\": true
                  },
                  {
                    \"title\": \"커밋자\",
                    \"value\": \"${{ github.actor }}\",
                    \"short\": true
                  },
                  {
                    \"title\": \"AWS 배포\",
                    \"value\": \"${{ github.event.inputs.deploy_to_aws }}\",
                    \"short\": true
                  },
                  {
                    \"title\": \"Run URL\",
                    \"value\": \"https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}\"
                  }
                ]
              }
            ]
          }" ${{ secrets.SLACK_WEBHOOK_URL }}
