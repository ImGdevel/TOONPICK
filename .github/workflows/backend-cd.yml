name: TOONPICK Backend CD Pipeline

on:
  workflow_dispatch:
    inputs:
      version:
        description: '배포 버전'
        required: true
        default: 'latest'

jobs:
  trigger-ci:
    runs-on: ubuntu-latest
    steps:
      - name: CI 파이프라인 트리거
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.PAT_TOKEN }}
          script: |
            async function main() {
              const workflowId = 141793296;
              const response = await github.rest.actions.createWorkflowDispatch({
                owner: context.repo.owner,
                repo: context.repo.repo,
                workflow_id: workflowId,
                ref: 'main'
              });
              console.log('CI 파이프라인 트리거 완료:', response.status);
            }
            main();

  wait-for-ci:
    runs-on: ubuntu-latest
    needs: trigger-ci
    steps:
      - name: CI 완료 대기
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.PAT_TOKEN }}
          script: |
            async function main() {
              const workflowId = 141793296;
              while (true) {
                const runs = await github.rest.actions.listWorkflowRuns({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  workflow_id: workflowId,
                  branch: 'main',
                  status: 'in_progress'
                });
                if (runs.data.workflow_runs.length === 0) {
                  console.log('CI 파이프라인 완료!');
                  break;
                }
                console.log('CI 파이프라인 실행 중...');
                await new Promise(r => setTimeout(r, 10000));
              }
            }
            main();

  docker-build-and-push:
    needs: wait-for-ci
    runs-on: ubuntu-latest

    steps:
      - name: 저장소 체크아웃
        uses: actions/checkout@v3
        with:
          token: ${{ secrets.PAT_TOKEN }}

      - name: 빌드된 JAR 파일 다운로드 (아티팩트 복원)
        uses: actions/download-artifact@v4
        with:
          name: backend-jar
          path: backend/module-application/toonpick-app-api/build/libs

      - name: 다운로드된 JAR 파일 확인
        run: ls -al backend/module-application/toonpick-app-api/build/libs

      - name: Docker Build & Push
        env:
          DOCKER_HUB_USERNAME: ${{ secrets.DOCKER_HUB_USERNAME }}
          DOCKER_HUB_PASSWORD: ${{ secrets.DOCKER_HUB_PASSWORD }}
          REPOSITORY: "toonpick-service-app"
          IMAGE_TAG: "${{ github.event.inputs.version }}"
        run: |
          echo "$DOCKER_HUB_PASSWORD" | docker login -u "$DOCKER_HUB_USERNAME" --password-stdin

          echo "=== Docker Build 시작 ==="
          docker build \
            --cache-from $DOCKER_HUB_USERNAME/$REPOSITORY:latest \
            -t $DOCKER_HUB_USERNAME/$REPOSITORY:$IMAGE_TAG \
            -t $DOCKER_HUB_USERNAME/$REPOSITORY:latest \
            -f backend/Dockerfile .

          docker push $DOCKER_HUB_USERNAME/$REPOSITORY:$IMAGE_TAG
          docker push $DOCKER_HUB_USERNAME/$REPOSITORY:latest

  deploy:
    needs: docker-build-and-push
    runs-on: ubuntu-latest

    steps:
      - name: EC2에 SSH 접속하여 배포 실행
        uses: appleboy/ssh-action@v0.1.10
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            export DOCKER_HUB_USERNAME="${{ secrets.DOCKER_HUB_USERNAME }}"
            export DOCKER_HUB_PASSWORD="${{ secrets.DOCKER_HUB_PASSWORD }}"

            cd ~/TOONPICK

            echo "기존 컨테이너 중지 및 제거..."
            docker-compose down || true

            echo "최신 Docker Image Pull..."
            docker pull $DOCKER_HUB_USERNAME/toonpick-service-app:latest
            docker pull $DOCKER_HUB_USERNAME/toonpick-service-app:${{ github.event.inputs.version }}

            echo "Docker 컨테이너 재배포..."
            docker-compose up -d --force-recreate
