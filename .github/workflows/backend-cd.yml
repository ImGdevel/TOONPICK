name: TOONPICK Backend CD Pipeline

on:
  workflow_dispatch:
    inputs:
      version:
        description: '배포 버전'
        required: true
        default: 'latest'
      module:
        description: '빌드/배포할 모듈 선택'
        required: true
        default: 'all'
        type: choice
        options:
          - api
          - worker
          - admin
          - all
      deploy:
        description: '배포 방식 선택'
        required: true
        default: 'none'
        type: choice
        options:
          - none
          - docker
          - aws
          - docker+aws

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: 저장소 체크아웃
        uses: actions/checkout@v3
        with:
          token: ${{ secrets.PAT_TOKEN }} 

      - name: JDK 17 설정
        uses: actions/setup-java@v3
        with:
          distribution: 'corretto'
          java-version: '17'

      - name: Gradle 캐시 설정 / 빌드 최적화
        uses: actions/cache@v3
        with:
          path: ~/.gradle/caches
          key: gradle-${{ runner.os }}-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            gradle-${{ runner.os }}-

      - name: Gradle 실행 권한 추가
        run: chmod +x backend/gradlew

      - name: Gradle 빌드 & 테스트 실행
        working-directory: backend
        run: |
          echo "[INFO] toonpick-app 메시지 빌드 시작"
          ./gradlew :module-application:toonpick-app-api:clean :module-application:toonpick-app-api:bootjar \
                     :module-application:toonpick-app-worker:clean :module-application:toonpick-app-worker:bootjar \
                     :module-application:toonpick-app-admin:clean :module-application:toonpick-app-admin:bootjar \
                     -x test --no-daemon --parallel --configure-on-demand

      - name: 빌드 결과 확인
        run: |
          echo "=== toonpick-app-api JAR ==="
          ls -al backend/module-application/toonpick-app-api/build/libs
          echo "=== toonpick-app-worker JAR ==="
          ls -al backend/module-application/toonpick-app-worker/build/libs
          echo "=== toonpick-app-admin JAR ==="
          ls -al backend/module-application/toonpick-app-admin/build/libs

      - name: toonpick-api JAR 업로드
        uses: actions/upload-artifact@v4
        with:
          name: toonpick-api
          path: backend/module-application/toonpick-app-api/build/libs/*.jar
          retention-days: 1

      - name: toonpick-worker JAR 업로드
        uses: actions/upload-artifact@v4
        with:
          name: toonpick-worker
          path: backend/module-application/toonpick-app-worker/build/libs/*.jar
          retention-days: 1

      - name: toonpick-admin JAR 업로드
        uses: actions/upload-artifact@v4
        with:
          name: toonpick-admin
          path: backend/module-application/toonpick-app-admin/build/libs/*.jar
          retention-days: 1



  docker-build-and-push:
    needs: build
    runs-on: ubuntu-latest
    if: ${{ contains(fromJSON('["docker","docker+aws"]'), github.event.inputs.deploy) }}
    strategy:
      matrix:
        module:
          - name: api
            dir: toonpick-app-api
            jar: toonpick-api-0.0.1-SNAPSHOT.jar
            repo: toonpick-service-api
          - name: worker
            dir: toonpick-app-worker
            jar: toonpick-worker-0.0.1-SNAPSHOT.jar
            repo: toonpick-service-worker
          - name: admin
            dir: toonpick-app-admin
            jar: toonpick-admin-0.0.1-SNAPSHOT.jar
            repo: toonpick-service-admin

    steps:
      - name: 저장소 체크아웃
        uses: actions/checkout@v3
        with:
          token: ${{ secrets.PAT_TOKEN }}

      - name: 현재 모듈 검사 - ${{ matrix.module.name }}
        run: |
          if [[ "${{ github.event.inputs.module }}" != "${{ matrix.module.name }}" && "${{ github.event.inputs.module }}" != "all" ]]; then
            echo "선택된 모듈이 아님: ${{ matrix.module.name }} - 스킵합니다."
            exit 0
          fi

      - name: 모듈별 아티팩트 다운로드
        uses: actions/download-artifact@v4
        with:
          name: toonpick-${{ matrix.module.name }}
          path: backend/module-application/${{ matrix.module.dir }}/build/libs

      - name: JAR 파일 목록 출력
        run: |
          echo "=== 다운로드된 JAR 목록 ==="
          ls -al backend/module-application/${{ matrix.module.dir }}/build/libs

      - name: JAR 파일을 app.jar로 이름 변경
        run: |
          mv backend/module-application/${{ matrix.module.dir }}/build/libs/${{ matrix.module.jar }} \
            backend/module-application/${{ matrix.module.dir }}/build/libs/app.jar

      - name: Docker Login
        env:
          DOCKER_HUB_USERNAME: ${{ secrets.DOCKER_HUB_USERNAME }}
          DOCKER_HUB_PASSWORD: ${{ secrets.DOCKER_HUB_PASSWORD }}
        run: echo "$DOCKER_HUB_PASSWORD" | docker login -u "$DOCKER_HUB_USERNAME" --password-stdin

      - name: Docker Build & Push - ${{ matrix.module.name }}
        env:
          DOCKER_HUB_USERNAME: ${{ secrets.DOCKER_HUB_USERNAME }}
          IMAGE_TAG: "${{ github.event.inputs.version }}"
        run: |
          echo "=== Docker Build 시작: ${{ matrix.module.name }} ==="
          docker build \
            -t $DOCKER_HUB_USERNAME/${{ matrix.module.repo }}:$IMAGE_TAG \
            -t $DOCKER_HUB_USERNAME/${{ matrix.module.repo }}:latest \
            -f backend/module-application/${{ matrix.module.dir }}/Dockerfile \
            backend/module-application/${{ matrix.module.dir }}

          docker push $DOCKER_HUB_USERNAME/${{ matrix.module.repo }}:$IMAGE_TAG
          docker push $DOCKER_HUB_USERNAME/${{ matrix.module.repo }}:latest



  deploy:
    needs: docker-build-and-push
    runs-on: ubuntu-latest

    steps:
      - name: 저장소 체크아웃
        uses: actions/checkout@v3

      - name: AWS 자격증명 설정
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-northeast-2

      - name: EC2 인스턴스 생성
        run: |
          echo "[INFO] EC2 생성 시작"
          INSTANCE_ID=$(aws ec2 run-instances \
            --region ap-northeast-2 \
            --image-id ${{ secrets.BASE_AMI_ID }} \
            --instance-type t2.micro \
            --key-name ${{ secrets.EC2_KEY }} \
            --security-group-ids ${{ secrets.SECURITY_GROUP_ID }} \
            --subnet-id ${{ secrets.SUBNET_ID }} \
            --iam-instance-profile Arn=${{ secrets.EC2_INSTANCE_PROFILE_ARN }} \
            --query 'Instances[?State.Name==`pending`].InstanceId' \
            --output text)

          echo "INSTANCE_ID=${INSTANCE_ID}" >> $GITHUB_ENV
          echo "[INFO] EC2 생성 완료: ${INSTANCE_ID}"

      - name: EC2 Public IP 획득
        run: |
          echo "[INFO] Public IP 획득 중..."
          sleep 20
          NEW_INSTANCE_IP=$(aws ec2 describe-instances \
            --instance-ids $INSTANCE_ID \
            --query 'Reservations[0].Instances[0].PublicIpAddress' \
            --output text)

          echo "NEW_INSTANCE_IP=${NEW_INSTANCE_IP}" >> $GITHUB_ENV
          echo "[INFO] Public IP: ${NEW_INSTANCE_IP}"

      - name: docker-compose.yaml EC2로 이동
        uses: appleboy/scp-action@v0.1.4
        with:
          host: ${{ env.NEW_INSTANCE_IP }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          source: ./backend/docker-compose.yaml
          target: /home/${{ secrets.SSH_USER }}/TOONPICK/
          strip_components: 2
          overwrite: true

      - name: EC2에 환경변수 세팅
        uses: appleboy/ssh-action@v0.1.10
        with:
          host: ${{ env.NEW_INSTANCE_IP }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            echo "[INFO] SSM Parameter Store에서 환경변수 가져오기"
        
            cd ~/TOONPICK
            
            SERVICE_NAME="TOONPICK"
            ENVIRONMENT="prod"

            aws ssm get-parameters-by-path \
              --path "/${SERVICE_NAME}/${ENVIRONMENT}/" \
              --with-decryption \
              --recursive \
              --output text \
              --query "Parameters[*].[Name,Value]" | \
              sed -E "s|/${SERVICE_NAME}/${ENVIRONMENT}/[^/]+/||g" | \
              awk '{print $1"="$2}' > .env

            if [ -f .env ]; then
              echo "[INFO] .env 파일이 성공적으로 생성되었습니다."
            else
              echo "[ERROR] .env 파일 생성에 실패했습니다."
            fi

            echo "[INFO] 환경변수 env 생성 완료"


      - name: 새로운 EC2에 SSH 접속하여 배포 실행
        uses: appleboy/ssh-action@v0.1.10
        with:
          host: ${{ env.NEW_INSTANCE_IP }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            export DOCKER_HUB_USERNAME="${{ secrets.DOCKER_HUB_USERNAME }}"
            export DOCKER_HUB_PASSWORD="${{ secrets.DOCKER_HUB_PASSWORD }}"

            echo "[INFO] Docker Hub 로그인..."
            echo "$DOCKER_HUB_PASSWORD" | docker login -u "$DOCKER_HUB_USERNAME" --password-stdin

            cd ~/TOONPICK
            echo "[INFO] 기존 서비스 정지..."
            docker-compose -f docker-compose.yaml down || true

            echo "[INFO] Docker 컨테이너 실행..."
            docker-compose -f docker-compose.yaml up -d --force-recreate

      - name: 새 AMI 생성
        run: |
          NEW_AMI_ID=$(aws ec2 create-image \
            --instance-id $INSTANCE_ID \
            --name "ToonPick-AMI-${{ github.run_id }}" \
            --no-reboot \
            --query 'ImageId' \
            --output text)

          echo "NEW_AMI_ID=${NEW_AMI_ID}" >> $GITHUB_ENV
          echo "[INFO] AMI 생성 완료: ${NEW_AMI_ID}"

      - name: Launch Template 바로가기 업데이트
        run: |
          NEW_VERSION=$(aws ec2 create-launch-template-version \
            --launch-template-id ${{ secrets.LAUNCH_TEMPLATE_ID }} \
            --version-description "Updated AMI from run ${{ github.run_id }}" \
            --source-version 1 \
            --launch-template-data "{\"ImageId\":\"${{ env.NEW_AMI_ID }}\"}" \
            --query 'LaunchTemplateVersion.VersionNumber' \
            --output text)

          echo "NEW_VERSION=${NEW_VERSION}" >> $GITHUB_ENV
          echo "[INFO] Launch Template 새로운 버전 생성: ${NEW_VERSION}"

      - name: Auto Scaling Group 업데이트
        run: |
          echo "[INFO] Auto Scaling Group 업데이트 시작"
          aws autoscaling update-auto-scaling-group \
            --auto-scaling-group-name ${{ secrets.AUTO_SCALING_GROUP_NAME }} \
            --launch-template LaunchTemplateId=${{ secrets.LAUNCH_TEMPLATE_ID }},Version='$Latest'
          echo "[INFO] Auto Scaling Group 업데이트 완료"

      - name: 인스턴스 리프레시 시작
        run: |
          echo "[INFO] 인스턴스 리프레시 시작"
          aws autoscaling start-instance-refresh \
            --auto-scaling-group-name ${{ secrets.AUTO_SCALING_GROUP_NAME }} \
            --strategy Rolling \
            --preferences '{"MinHealthyPercentage":100,"InstanceWarmup":300}'
          echo "[INFO] 인스턴스 리프레시 요청 완료"
  

      - name: 임시 EC2 인스턴스 중지 및 종료
        if: always()
        run: |
          echo "AMI 생성이 완료되었으므로 임시 인스턴스를 종료합니다."
          
          aws ec2 terminate-instances --instance-ids $INSTANCE_ID
          
          echo "임시 인스턴스 종료 요청 완료: ${INSTANCE_ID}"

      - name: Slack Webhook 알림 전송
        if: always()
        run: |
          JOB_STATUS="${{ job.status }}"
          if [ "$JOB_STATUS" == "success" ]; then
            exit 0  # 성공 시 알림 전송 생략
          fi

          AUTHOR="${{ github.actor }}"
          BRANCH="${{ github.ref_name }}"
          RUN_ID="${{ github.run_id }}"
          REPO="${{ github.repository }}"
          WORKFLOW_NAME="${{ github.workflow }}"
          RUN_URL="https://github.com/${REPO}/actions/runs/${RUN_ID}"
          TIMESTAMP=$(TZ=Asia/Seoul date "+%Y-%m-%d %H:%M (KST)")
          DURATION="3분 12초"  # 필요 시 동적으로 대체

          curl -X POST -H 'Content-type: application/json' --data "{
            \"attachments\": [
              {
                \"blocks\": [
                  {
                    \"type\": \"header\",
                    \"text\": {
                      \"type\": \"plain_text\",
                      \"text\": \"❌ [CI 실패] TOONPICK - ${BRANCH} 브랜치\",
                      \"emoji\": true
                    }
                  },
                  {
                    \"type\": \"section\",
                    \"text\": {
                      \"type\": \"mrkdwn\",
                      \"text\": \"CI 작업이 실패하였습니다. \`build\` 단계에서 단위 테스트 중 오류가 발생했습니다.\"
                    }
                  },
                  {
                    \"type\": \"divider\"
                  },
                  {
                    \"type\": \"section\",
                    \"fields\": [
                      {
                        \"type\": \"mrkdwn\",
                        \"text\": \"*작업자:*\t${AUTHOR}\"
                      },
                      {
                        \"type\": \"mrkdwn\",
                        \"text\": \"*소요 시간:*\t${DURATION}\"
                      },
                      {
                        \"type\": \"mrkdwn\",
                        \"text\": \"*작업 위치:*\tGitHub Actions\"
                      },
                      {
                        \"type\": \"mrkdwn\",
                        \"text\": \"*상세 위치:*\t브랜치 ${BRANCH}\"
                      }
                    ]
                  },
                  {
                    \"type\": \"context\",
                    \"elements\": [
                      {
                        \"type\": \"mrkdwn\",
                        \"text\": \"*${TIMESTAMP}*\"
                      }
                    ]
                  },
                  {
                    \"type\": \"context\",
                    \"elements\": [
                      {
                        \"type\": \"mrkdwn\",
                        \"text\": \"<${RUN_URL}|🔗 실행 상세 보기>\"
                      }
                    ]
                  }
                ]
              }
            ]
          }" ${{ secrets.SLACK_WEBHOOK_URL }}
