name: TOONPICK Backend CI Pipeline

on:
  push:
    branches:
      - main
      - develop

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: 저장소 체크아웃
        uses: actions/checkout@v3
        with:
          token: ${{ secrets.PAT_TOKEN }} 

      - name: JDK 17 설정
        uses: actions/setup-java@v3
        with:
          distribution: 'corretto'
          java-version: '17'

      - name: Gradle 캐시 설정 (빌드 최적화)
        uses: actions/cache@v3
        with:
          path: ~/.gradle/caches
          key: gradle-${{ runner.os }}-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            gradle-${{ runner.os }}-

      - name: Gradle 실행 권한 추가
        run: chmod +x backend/gradlew

      - name: Gradle 빌드
        working-directory: backend
        run: |
          ./gradlew clean build -x test --no-daemon --parallel --configure-on-demand

      - name: 빌드 결과 검증 (JAR 파일 확인)
        run: |
          echo "=== Gradle Build 완료 후 JAR 파일 위치 확인 ==="
          find backend/module-application/toonpick-app-api/build/libs -type f -name "*.jar"
          ls -al backend/module-application/toonpick-app-api/build/libs

      - name: 빌드된 JAR 파일 업로드 (아티팩트 저장)
        uses: actions/upload-artifact@v4
        with:
          name: backend-jar
          path: backend/module-application/toonpick-app-api/build/libs/toonpick-0.0.1-SNAPSHOT.jar

  docker:
    needs: build
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest

    steps:
      - name: 저장소 체크아웃
        uses: actions/checkout@v3
        with:
          token: ${{ secrets.PAT_TOKEN }} 

      - name: 빌드된 JAR 파일 다운로드 (아티팩트 복원)
        uses: actions/download-artifact@v4
        with:
          name: backend-jar
          path: backend/module-application/toonpick-app-api/build/libs

      - name: Docker Build & Push
        env:
          DOCKER_HUB_USERNAME: ${{ secrets.DOCKER_HUB_USERNAME }}
          DOCKER_HUB_PASSWORD: ${{ secrets.DOCKER_HUB_PASSWORD }}
          REPOSITORY: "toonpick-service-app"
          IMAGE_TAG: "v0.1.${{ github.run_number }}"
        run: |
          echo "$DOCKER_HUB_PASSWORD" | docker login -u "$DOCKER_HUB_USERNAME" --password-stdin
          
          echo "=== Docker Build 시작 ==="
          docker build \
            --cache-from $DOCKER_HUB_USERNAME/$REPOSITORY:latest \
            -t $DOCKER_HUB_USERNAME/$REPOSITORY:$IMAGE_TAG \
            -t $DOCKER_HUB_USERNAME/$REPOSITORY:latest \
            -f backend/Dockerfile .

          docker push $DOCKER_HUB_USERNAME/$REPOSITORY:$IMAGE_TAG
          docker push $DOCKER_HUB_USERNAME/$REPOSITORY:latest

      - name: CD Pipeline 실행 트리거
        uses: benc-uk/workflow-dispatch@v1
        with:
          workflow: "backend-cd.yml"
          token: ${{ secrets.PAT_TOKEN }}
