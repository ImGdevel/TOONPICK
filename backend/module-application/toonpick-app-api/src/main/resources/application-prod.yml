server:
  port: {API_SERVER_PORT}

spring:
  datasource:
    data:
      driver-class-name: org.mariadb.jdbc.Driver
      jdbc-url: jdbc:mariadb://${DB_MARIADB_HOST}:${DB_MARIADB_PORT}/${DB_MARIADB_NAME}?useSSL=false&useUnicode=true&characterEncoding=utf8mb4&serverTimezone=Asia/Seoul{DB_MARIADB_ADDITIONAL_PARAMS}
      username: ${DB_MARIADB_USERNAME}
      password: ${DB_MARIADB_PASSWORD}

  redis:
    host: ${DB_REDIS_HOST}
    port: ${DB_REDIS_PORT}
    timeout: 10000ms
    jedis:
      enabled: false

  data:
    mongodb:
      uri: mongodb://${DB_MONGO_USERNAME}:${DB_MONGO_PASSWORD}@mongodb:${DB_MONGO_PORT}/${DB_MONGO_DATABASE}?authSource=admin

  jwt:
    secret: ${JWT_SECRET}
    access-token-expiration: ${JWT_ACCESS_TOKEN_EXPIRATION}
    refresh-token-expiration: ${JWT_REFRESH_TOKEN_EXPIRATION}

  security:
    oauth2:
      client:
        registration:
          google:
            client-name: google
            client-id: ${OAUTH_GOOGLE_CLIENT_ID}
            client-secret: ${OAUTH_GOOGLE_CLIENT_SECRET}
            redirect-uri: ${OAUTH_GOOGLE_REDIRECT_URL}
            authorization-grant-type: authorization_code
            scope:
              - profile
              - email
          naver:
            client-name: naver
            client-id: ${OAUTH_NAVER_CLIENT_ID}
            client-secret: ${OAUTH_NAVER_CLIENT_SECRET}
            redirect-uri: ${OAUTH_NAVER_REDIRECT_URL}
            authorization-grant-type: authorization_code
            scope:
              - name
              - email
        provider:
          naver:
            authorization-uri: https://nid.naver.com/oauth2.0/authorize
            token-uri: https://nid.naver.com/oauth2.0/token
            user-info-uri: https://openapi.naver.com/v1/nid/me
            user-name-attribute: response

  cloud:
    aws:
      credentials:
        access-key: ${AWS_ACCESS_KEY}
        secret-key: ${AWS_SECRET_KEY}
      region:
        static: ${AWS_REGION}
      s3:
        bucket: ${AWS_S3_BUCKET}
      sqs:
        queue:
          request:
            name: ${AWS_SQS_UPDATE_REQUEST_QUEUE_NAME}
            url: ${AWS_SQS_UPDATE_REQUEST_QUEUE_URL}
          response:
            name: ${AWS_SQS_UPDATE_RESPONSE_QUEUE_NAME}
            url: ${AWS_SQS_UPDATE_RESPONSE_QUEUE_URL}
        auto-create: false
        enabled: false

logging:
  level:
    org:
      springframework: INFO
  file:
    name: ${LOG_FILE_NAME}
    max-size: 10MB
